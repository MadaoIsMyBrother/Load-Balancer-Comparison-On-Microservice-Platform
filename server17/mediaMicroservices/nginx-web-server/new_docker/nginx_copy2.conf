# Load the OpenTracing dynamic module.
load_module modules/ngx_http_opentracing_module.so;

# Checklist: Make sure that worker_processes == #cores you gave to
# nginx process
worker_processes  4;
error_log  logs/error.log error;

# Checklist: Make sure that worker_connections * worker_processes
# is greater than the total connections between the client and Nginx. 
events {
  worker_connections  1024;
}



http {
  # Load a vendor tracer
#   opentracing on;
#   opentracing_load_tracer /usr/local/lib/libjaegertracing_plugin.so /usr/local/openresty/nginx/jaeger-config.json;


  include       mime.types;
  default_type  application/octet-stream;

  # access_log  logs/access.log;


  # Checklist: Turn of the access_log and error_log if you
  # don't need them.
  #access_log on;
  #error_log on;

  sendfile        on;
  tcp_nopush      on;
  tcp_nodelay     on;

  # Checklist: Make sure the keepalive_timeout is greateer than
  # the duration of your experiment and keepalive_requests
  # is greateer than the total number of requests sent from
  # the workload generator
  keepalive_timeout  120s;
  keepalive_requests 100000;

  # Docker default hostname resolver
  resolver 127.0.0.11 ipv6=off;

  lua_package_path '/usr/local/openresty/nginx/lua-scripts/?.lua;;/usr/local/?.lua;';

  lua_shared_dict conn_dict 1M;  


  init_by_lua_block {
        local IWLC = require "iwlc"
        upstream_servers = {
                "172.22.154.16:8080",
                "172.22.154.20:8080"
        }
        iwlc = IWLC:new(upstream_servers, {2,2}, 2)
	package.loaded.m_iwlc = iwlc
  }

  upstream dynamic {
    server 172.22.154.16:8080 fail_timeout=3;
    server 172.22.154.20:8080 fail_timeout=3;
    #server fa21-cs523-15.cs.illinois.edu:8080;
    #server fa21-cs523-19.cs.illinois.edu:8080; 
    #balancer_by_lua_block {
    	#local balancer = require("ngx.balancer")
	#local iwlc = package.loaded.m_iwlc
	#local server = iwlc:iwlc(ngx.ctx.one, ngx.ctx.two)
	#ok, err = balancer.set_current_peer(server)
	#package.loaded.m_iwlc.C = 10
	#if not ok then
            #ngx.log(ngx.ERR, "set_current_peer failed: ", err)
            #return ngx.exit(500)
        #end
    #}
    balancer_by_lua_block {
	function string:addr(s)
	  local _start, _end = self:find(s or ":")
	  return (_start ~= nil) and self:sub(1, _start - 1) or self,
	    (_end ~= nil) and self:sub(_end + 1) or ''
	end
	local ups = require('ngx.upstream')
        local balancer = require("ngx.balancer")
        local dict_a = ngx.shared.live_hosts;
	local backend = ups.current_upstream_name()
	local servers = ups.get_servers(backend)
	local idx = math.random(1, table.getn(servers))
	local sel = servers[idx].addr

        ok, err = balancer.set_current_peer(sel)
        if not ok then
            ngx.log(ngx.ERR, "set_current_peer failed: ", err)
            return ngx.exit(500)
        end
    }
  }

  server {
    # Checklist: Set up the port that nginx listens to.
    listen       8080 reuseport;
    server_name  localhost;
    location /wrk2-api/cast-info/write {
      rewrite_by_lua_block  {
	ngx.ctx.one =package.loaded.m_iwlc:get_connections("172.22.154.16:8080")
	ngx.ctx.two =package.loaded.m_iwlc:get_connections("172.22.154.20:8080")
	ngx.log(ngx.DEBUG, "HERE ", ngx.ctx.one, ngx.ctx.two)
      }	      
      proxy_pass http://dynamic;
    }
    location /wrk2-api/movie-info/write {
      # content_by_lua_file /usr/local/iterate.lua;
      rewrite_by_lua_block  {
	ngx.ctx.one =package.loaded.m_iwlc:get_connections("172.22.154.16:8080")
	ngx.ctx.two =package.loaded.m_iwlc:get_connections("172.22.154.20:8080")
	ngx.log(ngx.ERR, "HERE ", ngx.ctx.one, ngx.ctx.two)
      }	      
      proxy_pass http://dynamic;
    }
    location /wrk2-api/user/register {
      rewrite_by_lua_block  {
	ngx.ctx.one =package.loaded.m_iwlc:get_connections("172.22.154.16:8080")
	ngx.ctx.two =package.loaded.m_iwlc:get_connections("172.22.154.20:8080")
	ngx.log(ngx.DEBUG, "HERE ", ngx.ctx.one, ngx.ctx.two)
      }	      
      proxy_pass http://dynamic;
    }
    location /wrk2-api/movie/register {
      rewrite_by_lua_block  {
	ngx.ctx.one =package.loaded.m_iwlc:get_connections("172.22.154.16:8080")
	ngx.ctx.two =package.loaded.m_iwlc:get_connections("172.22.154.20:8080")
	ngx.log(ngx.DEBUG, "HERE ", ngx.ctx.one, ngx.ctx.two)
      }	      
      proxy_pass http://dynamic;
    }
    location /wrk2-api/review/compose {
      rewrite_by_lua_block  {
	local concat = table.concat
                local upstream = require "ngx.upstream"
                local get_servers = upstream.get_servers
                local get_upstreams = upstream.get_upstreams

                local us = get_upstreams()
                for _, u in ipairs(us) do
                    ngx.say("upstream ", u, ":")
                    local srvs, err = upstream.get_primary_peers(u)
                    if not srvs then
                        ngx.say("failed to get servers in upstream ", u)
                    else
                        for _, srv in ipairs(srvs) do
                            local first = true
                            for k, v in pairs(srv) do
                                if first then
                                    first = false
                                    ngx.print("    ")
                                else
                                    ngx.print(", ")
                                end
                                if type(v) == "table" then
                                    ngx.log(ngx.ERR, k, " = {", concat(v, ", "), "}")
                                else
                                    ngx.log(ngx.ERR, k, " = ", v)
                                end
                            end
                            ngx.print("\n")
                        end
                    end
                end
	ngx.ctx.one =package.loaded.m_iwlc:get_connections("172.22.154.16:8080")
	ngx.ctx.two =package.loaded.m_iwlc:get_connections("172.22.154.20:8080")
	ngx.log(ngx.DEBUG, "HERE ", ngx.ctx.one, ngx.ctx.two)
      }	      
      proxy_pass http://dynamic;
    }
    location /wrk2-api/plot/write {
      rewrite_by_lua_block  {
	ngx.ctx.one =package.loaded.m_iwlc:get_connections("172.22.154.16:8080")
	ngx.ctx.two =package.loaded.m_iwlc:get_connections("172.22.154.20:8080")
	ngx.log(ngx.DEBUG, "HERE ", ngx.ctx.one, ngx.ctx.two)
      }	      
      proxy_pass http://dynamic;
    }
    access_log off;
    lua_need_request_body on;
  }
}

