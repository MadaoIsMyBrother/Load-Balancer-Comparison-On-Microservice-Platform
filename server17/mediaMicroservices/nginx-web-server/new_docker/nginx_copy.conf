# Load the OpenTracing dynamic module.
load_module modules/ngx_http_opentracing_module.so;

# Checklist: Make sure that worker_processes == #cores you gave to
# nginx process
worker_processes  4;

# error_log  logs/error.log;

# Checklist: Make sure that worker_connections * worker_processes
# is greater than the total connections between the client and Nginx. 
events {
  worker_connections  1024;
}



http {
  # Load a vendor tracer
#   opentracing on;
#   opentracing_load_tracer /usr/local/lib/libjaegertracing_plugin.so /usr/local/openresty/nginx/jaeger-config.json;


  include       mime.types;
  default_type  application/octet-stream;

  log_format main '$remote_addr - $remote_user [$time_local] "$request"'
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for"';
  # access_log  logs/access.log  main;


  # Checklist: Turn of the access_log and error_log if you
  # don't need them.
  access_log  on;
  error_log on;

  lua_need_request_body on;
  sendfile        on;
  tcp_nopush      on;
  tcp_nodelay     on;

  # Checklist: Make sure the keepalive_timeout is greateer than
  # the duration of your experiment and keepalive_requests
  # is greateer than the total number of requests sent from
  # the workload generator
  keepalive_timeout  120s;
  keepalive_requests 100000;

  # Docker default hostname resolver
  resolver 127.0.0.11 ipv6=off;

  lua_package_path '/usr/local/openresty/nginx/lua-scripts/?.lua;;';

  lua_shared_dict live_hosts 1M;  

  init_by_lua_block {
	ngx.log(ngx.INFO, "here")
   	upstream_servers = {
		"172.22.154.20:8080",
		"172.22.154.17:8080"
	}
	local dict_a = ngx.shared.live_hosts;
        dict_a:set("abc", 9)
  }

  upstream dynamic {
    # server localhost:8081;
    # server fa21-cs523-15.cs.illinois.edu:8080;
    # server fa21-cs523-19.cs.illinois.edu:8080;
    server 127.0.0.1 fail_timeout=3;
    balancer_by_lua_block {
        local balancer = require("ngx.balancer")
	local dict_a = ngx.shared.live_hosts;
	local server = upstream_servers[math.random(#upstream_servers)]

        ok, err = balancer.set_current_peer(server)
        if not ok then
            ngx.log(ngx.ERR, "set_current_peer failed: ", err)
            return ngx.exit(500)
        end
    } 
  }

  server {
	
    # Checklist: Set up the port that nginx listens to.
    listen       8080 reuseport;
    server_name  localhost;
    # location / {
    #   proxy_pass http://dynamic;
    # }
    location /wrk2-api/cast-info/write {
      proxy_pass http://dynamic;
    }
    location /wrk2-api/movie-info/write {
      default_type text/plain;
      content_by_lua_block { 
	local concat = table.concat
	local upstream = require "ngx.upstream"
	local get_peers = upstream.get_primary_peers
	local get_upstreams = upstream.get_upstreams

	local us = get_upstreams()
	for _, u in ipairs(us) do
	    ngx.log(ngx.ERR, "upstream ", u, ":")
	    local srvs, err = get_peers(u)
	    if not srvs then
		ngx.say("failed to get servers in upstream ", u)
	    else
		for _, srv in ipairs(srvs) do
		    local first = true
		    for k, v in pairs(srv) do
			if first then
			    first = false
			    ngx.print("    ")
			else
			    ngx.print(", ")
			end
			if type(v) == "table" then
			    ngx.print(k, " = {", concat(v, ", "), "}")
			else
			    ngx.print(k, " = ", v)
			end
		    end
		    ngx.print("\n")
		end
	    end
	end
      }
      log_by_lua_block {
  	local dict = ngx.shared.live_hosts;
  	dict:incr(ngx.var.host, -1);
      }
      proxy_pass http://dynamic;
    }
    location /wrk2-api/user/register {
      proxy_pass http://dynamic;
    }
    location /wrk2-api/movie/register {
      proxy_pass http://dynamic;
    }
    location /wrk2-api/review/compose {
      proxy_pass http://dynamic;
    }
    location /wrk2-api/plot/write {
      proxy_pass http://dynamic;
    }

    # Checklist: Make sure that the location here is consistent
    # with the location you specified in wrk2.
    # location /wrk2-api/user/register {
    #   content_by_lua '
    #       local client = require "wrk2-api/user/register"
    #       client.RegisterUser();
    #   ';
    # }

    # location /wrk2-api/movie/register {
    #   content_by_lua '
    #       local client = require "wrk2-api/movie/register"
    #       client.RegisterMovie();
    #   ';
    # }

    # location /wrk2-api/review/compose {
    #   content_by_lua '
    #       local client = require "wrk2-api/review/compose"
    #       client.ComposeReview();
    #   ';
    # }

    # location /wrk2-api/movie-info/write {
    #   content_by_lua '
    #       local client = require "wrk2-api/movie-info/write"
    #       client.WriteMovieInfo();
    #   ';
    # }

    # location /wrk2-api/cast-info/write {
    #   content_by_lua '
    #       local client = require "wrk2-api/cast-info/write"
    #       client.WriteCastInfo();
    #   ';
    # }

    # location /wrk2-api/plot/write {
    #   content_by_lua '
    #       local client = require "wrk2-api/plot/write"
    #       client.WritePlot();
    #   ';
    # }
  }
}

