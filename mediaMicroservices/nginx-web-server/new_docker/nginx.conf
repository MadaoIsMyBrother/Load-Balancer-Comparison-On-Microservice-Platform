# Load the OpenTracing dynamic module.
load_module modules/ngx_http_opentracing_module.so;

# Checklist: Make sure that worker_processes == #cores you gave to
# nginx process
worker_processes  4;
error_log  logs/error.log error;

# Checklist: Make sure that worker_connections * worker_processes
# is greater than the total connections between the client and Nginx.
events {
  worker_connections  1024;
}



http {
  # Load a vendor tracer
#   opentracing on;
#   opentracing_load_tracer /usr/local/lib/libjaegertracing_plugin.so /usr/local/openresty/nginx/jaeger-config.json;


  include       mime.types;
  default_type  application/octet-stream;

  # access_log  logs/access.log;


  # Checklist: Turn of the access_log and error_log if you
  # don't need them.
  #access_log on;
  #error_log on;

  sendfile        on;
  tcp_nopush      on;
  tcp_nodelay     on;

  # Checklist: Make sure the keepalive_timeout is greateer than
  # the duration of your experiment and keepalive_requests
  # is greateer than the total number of requests sent from
  # the workload generator
  keepalive_timeout  120s;
  keepalive_requests 100000;

  # Docker default hostname resolver
  resolver 127.0.0.11 ipv6=off;

  lua_package_path '/usr/local/openresty/nginx/lua-scripts/?.lua;;/usr/local/?.lua;';

  lua_shared_dict conn_dict 1M;


  init_by_lua_block {
        local IWLC = require "iwlc"
        upstream_servers = {
                "172.22.154.16:8080",
                "172.22.154.19:8080",
                "172.22.154.20:8080"
        }
        iwlc = IWLC:new(upstream_servers, {1,1,1}, 5)
        package.loaded.m_iwlc = iwlc
  }

  upstream backend1 {
    server 172.22.154.16:8080;
  }

  upstream backend2 {
    server 172.22.154.19:8080;
  }

  upstream backend3 {
    server 172.22.154.20:8080;
  }

  server {
    # Checklist: Set up the port that nginx listens to.
    listen       8080 reuseport;
    server_name  localhost;
    location /wrk2-api/cast-info/write {
      set $chosen_upstream '';
      rewrite_by_lua_block  {
        ngx.ctx.one =package.loaded.m_iwlc:get_connections("172.22.154.16:8080")
        ngx.ctx.two =package.loaded.m_iwlc:get_connections("172.22.154.19:8080")
        ngx.ctx.three =package.loaded.m_iwlc:get_connections("172.22.154.20:8080")
        local balancer = require("ngx.balancer")
        local iwlc = package.loaded.m_iwlc
        local server = iwlc:iwlc(ngx.ctx.one, ngx.ctx.two, ngx.ctx.three)
        if (server == "172.22.154.16:8080") then
          ngx.var.chosen_upstream = 'backend1'
        end
        if (server == "172.22.154.19:8080") then
          ngx.var.chosen_upstream = 'backend2'
        end
        if (server == "172.22.154.20:8080") then
          ngx.var.chosen_upstream = 'backend3'
        end
      }
      proxy_pass http://$chosen_upstream;
    }
    location /wrk2-api/movie-info/write {
      set $chosen_upstream '';
      rewrite_by_lua_block  {
        ngx.ctx.one =package.loaded.m_iwlc:get_connections("172.22.154.16:8080")
        ngx.ctx.two =package.loaded.m_iwlc:get_connections("172.22.154.19:8080")
        ngx.ctx.three =package.loaded.m_iwlc:get_connections("172.22.154.20:8080")
        local balancer = require("ngx.balancer")
        local iwlc = package.loaded.m_iwlc
        local server = iwlc:iwlc(ngx.ctx.one, ngx.ctx.two, ngx.ctx.three)
        if (server == "172.22.154.16:8080") then
          ngx.var.chosen_upstream = 'backend1'
        end
        if (server == "172.22.154.19:8080") then
          ngx.var.chosen_upstream = 'backend2'
        end
        if (server == "172.22.154.20:8080") then
          ngx.var.chosen_upstream = 'backend3'
        end
      }
      proxy_pass http://$chosen_upstream;
    }
    location /wrk2-api/user/register {
      set $chosen_upstream '';
      rewrite_by_lua_block  {
        ngx.ctx.one =package.loaded.m_iwlc:get_connections("172.22.154.16:8080")
        ngx.ctx.two =package.loaded.m_iwlc:get_connections("172.22.154.19:8080")
        ngx.ctx.three =package.loaded.m_iwlc:get_connections("172.22.154.20:8080")
        local balancer = require("ngx.balancer")
        local iwlc = package.loaded.m_iwlc
        local server = iwlc:iwlc(ngx.ctx.one, ngx.ctx.two, ngx.ctx.three)
        if (server == "172.22.154.16:8080") then
          ngx.var.chosen_upstream = 'backend1'
        end
        if (server == "172.22.154.19:8080") then
          ngx.var.chosen_upstream = 'backend2'
        end
        if (server == "172.22.154.20:8080") then
          ngx.var.chosen_upstream = 'backend3'
        end
      }
      proxy_pass http://$chosen_upstream;
    }
    location /wrk2-api/movie/register {
      set $chosen_upstream '';
      rewrite_by_lua_block  {
        ngx.ctx.one =package.loaded.m_iwlc:get_connections("172.22.154.16:8080")
        ngx.ctx.two =package.loaded.m_iwlc:get_connections("172.22.154.19:8080")
        ngx.ctx.three =package.loaded.m_iwlc:get_connections("172.22.154.20:8080")
        local balancer = require("ngx.balancer")
        local iwlc = package.loaded.m_iwlc
        local server = iwlc:iwlc(ngx.ctx.one, ngx.ctx.two, ngx.ctx.three)
        if (server == "172.22.154.16:8080") then
          ngx.var.chosen_upstream = 'backend1'
        end
        if (server == "172.22.154.19:8080") then
          ngx.var.chosen_upstream = 'backend2'
        end
        if (server == "172.22.154.20:8080") then
          ngx.var.chosen_upstream = 'backend3'
        end
      }
      proxy_pass http://$chosen_upstream;
    }
    location /wrk2-api/review/compose {
      set $chosen_upstream '';
      rewrite_by_lua_block  {
        ngx.ctx.one =package.loaded.m_iwlc:get_connections("172.22.154.16:8080")
        ngx.ctx.two =package.loaded.m_iwlc:get_connections("172.22.154.19:8080")
        ngx.ctx.three =package.loaded.m_iwlc:get_connections("172.22.154.20:8080")
        local balancer = require("ngx.balancer")
        local iwlc = package.loaded.m_iwlc
        local server = iwlc:iwlc(ngx.ctx.one, ngx.ctx.two, ngx.ctx.three)
        if (server == "172.22.154.16:8080") then
          ngx.var.chosen_upstream = 'backend1'
        end
        if (server == "172.22.154.19:8080") then
          ngx.var.chosen_upstream = 'backend2'
        end
        if (server == "172.22.154.20:8080") then
          ngx.var.chosen_upstream = 'backend3'
        end
      }
      proxy_pass http://$chosen_upstream;
    }
    location /wrk2-api/plot/write {
      set $chosen_upstream '';
      rewrite_by_lua_block  {
        ngx.ctx.one =package.loaded.m_iwlc:get_connections("172.22.154.16:8080")
        ngx.ctx.two =package.loaded.m_iwlc:get_connections("172.22.154.19:8080")
        ngx.ctx.three =package.loaded.m_iwlc:get_connections("172.22.154.20:8080")
        local balancer = require("ngx.balancer")
        local iwlc = package.loaded.m_iwlc
        local server = iwlc:iwlc(ngx.ctx.one, ngx.ctx.two, ngx.ctx.three)
        if (server == "172.22.154.16:8080") then
          ngx.var.chosen_upstream = 'backend1'
        end
        if (server == "172.22.154.19:8080") then
          ngx.var.chosen_upstream = 'backend2'
        end
        if (server == "172.22.154.20:8080") then
          ngx.var.chosen_upstream = 'backend3'
        end
      }
      proxy_pass http://$chosen_upstream;
    }
    access_log off;
    lua_need_request_body on;
  }
}